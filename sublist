#!/usr/bin/env python

usage = """
  usage: sublist [sum]

  Looks for a combination of integers in a hardcoded list that
  add up to a target value, which defaults to 100,000,000.
"""

import sys
import itertools
import datetime

""" Allow specifying target sum as an option.
"""
target = 100000000
if len(sys.argv) > 1:
  if sys.argv[-1].isdigit():
    target = int(sys.argv[-1])
  else:
    print usage
    sys.exit(0)


def time_exec(func):
  def wrapper(*args, **kwargs):
    print "Running {0}...".format(func.__name__),
    sys.stdout.flush()
    start = datetime.datetime.now()
    result = func(*args, **kwargs)
    delta = datetime.datetime.now() - start
    print "took {0}.{1}s\n".format(delta.seconds, delta.microseconds)
    sys.stdout.flush()
    return result
  return wrapper

    
@time_exec    
def sum_combinations(ints, target):
  """Sums combinations of the input list (ints) generated by itertools
     in search of one that equals the target value.

  Args:
    ints: list of integers to test
    target: target sum value
    
  Returns:
    List of integers from ints argument that sum to target, else None.
  """
  for n in range(1, len(ints) + 1):
    for it in itertools.combinations(ints, n):
      if sum(it) == target:
        return it
  return None


def sum_list(ints, target, run_ints, i=0):
  """Wrote my own recurcive function to abort chains where an intermediate
     sum exceeded the target.  It appends and pops to and from the run_ints
     parameter to build and test a chain of integers, looking for a sum
     that equals the target value.
    
  Args:
    ints: list of integers to test
    target: target sum value
    run_ints: current chain of values to test
    i: starting index in ints for this call

  Returns:
    True if sum(run_ints) == target, else False
  """
  for j in range(i, len(ints)):
    run_ints.append(ints[j])
    part = sum(run_ints)
    if part == target:
      return True
    elif part < target:
      if sum_list(ints, target, run_ints, j+1):
        break
    run_ints.pop(-1)
  return sum(run_ints) == target
   

def sum_sorted(ints, target, run_ints, i=0):
  """Wrote my own recurcive function to abort chains where an intermediate
     sum exceeded the target.  It appends and pops to and from the run_ints
     parameter to build and test a chain of integers, looking for a sum
     that equals the target value.
    
  Args:
    ints: list of integers to test
    target: target sum value
    run_ints: current chain of values to test
    i: starting index in ints for this call

  Returns:
    True if sum(run_ints) == target, else False
  """
  for j in range(i, len(ints)):
    run_ints.append(ints[j])
    part = sum(run_ints)
    if part == target:
      return True
    elif part < target:
      rest = sum(ints[j+1:])
      if part + rest < target:
        run_ints.pop(-1)
        return False
      if sum_sorted(ints, target, run_ints, j+1):
        return True
    else:
      run_ints.pop(-1)
      break
    run_ints.pop(-1)
  return False
   

""" Hardcoded list of integers to use.
"""
ints = [18897109, 12828837, 9461105, 6371773, 5965343, 5946800, 5582170, 5564635, 5268860, 4552402, 4335391, 4296250, 4224851, 4192887, 3439809, 3279833, 3095313, 2812896, 2783243, 2710489, 2543482, 2356285, 2226009, 2149127, 2142508, 2134411]
#ints = [11, 12, 9, 4, 3, 2, 1]

print "Source integers to search for a combination whose sum is {0}:\n{1}\n".format(target, str(ints))

found = sum_combinations(ints, target)

if found:
  print "Found", str(found)
else:
  print "Not found"
print

run_ints = []

timed = time_exec(sum_list)
found = timed(ints, target, run_ints)

if found:
  print "Found", str(run_ints)
else:
  print "Not found"
print

ints.sort()
print "Source integers to search for a combination whose sum is {0}:\n{1}\n".format(target, str(ints))

found = sum_combinations(ints, target)

if found:
  print "Found", str(found)
else:
  print "Not found"
print

run_ints = []

timed = time_exec(sum_sorted)
found = timed(ints, target, run_ints)

if found:
  print "Found", str(run_ints)
else:
  print "Not found"
print

ints.sort(reverse=True)
print "Source integers to search for a combination whose sum is {0}:\n{1}\n".format(target, str(ints))

found = sum_combinations(ints, target)

if found:
  print "Found", str(found)
else:
  print "Not found"
print

run_ints = []

timed = time_exec(sum_sorted)
found = timed(ints, target, run_ints)

if found:
  print "Found", str(run_ints)
else:
  print "Not found"
